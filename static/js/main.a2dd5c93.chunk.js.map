{"version":3,"sources":["hooks/useLocalStorage.js","hooks/useWindowSize.js","components/settings-button/SettingsButton.js","components/settings-dialog/SettingsDialog.js","components/input-field/InputField.js","components/search-bar/SearchBar.js","components/top-bar/TopBar.js","components/gif/Gif.js","components/gifs-grid/GifsGrid.js","components/gif-search-results/GifSearchResults.js","components/load-button/LoadButton.js","components/main-section/MainSection.js","components/app/App.js","index.js"],"names":["useLocalStorage","key","initialValue","useState","window","item","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useWindowSize","width","undefined","height","windowSize","setWindowSize","useEffect","handleResize","innerWidth","innerHeight","addEventListener","removeEventListener","SettingsButton","setFunction","isActive","text","refreshOnClick","toggleIcon","faToggleOn","faToggleOff","className","onClick","e","preventDefault","prev","location","reload","icon","SettingsDialog","isOpen","setIsOpen","settingsIconRef","darkModeIsActive","setDarkModeIsActive","isLowResolution","setIsLowResolution","playOnlyOnHover","setPlayOnlyOnHover","lazyLoadingIsOn","setLazyLoadingIsOn","infiniteScrollIsActive","setInfiniteScrollIsActive","dialogRef","useRef","dialogOffsetLeft","setDialogOffsetLeft","settingsButtonData","state","refresh","dialogClassName","handleClickOutside","current","contains","target","offsetLeft","iconWidth","document","id","ref","style","left","map","setting","InputField","inputRef","trendingGifsQueryCode","queryString","setQueryString","focusInInput","setFocusInInput","inputValue","inputClassName","placeholder","xIcon","focus","faXmark","type","onChange","onFocus","onBlur","SearchBar","submitQuery","onSubmit","aria-label","faMagnifyingGlass","TopBar","setGifs","setFailedToLoad","fetchGifs","topBarIsStyled","settingsDialogIsOpen","setSettingsDialogIsOpen","topBarClassName","query","blur","alert","body","classList","toggle","faHome","faEllipsisV","Gif","gifObject","gifsContainerRef","gifRef","io","src","setSrc","isInViewport","setIsInViewport","images","stillUrl","fixed_height_still","url","properResolutionUrl","fixed_height_downsampled","fixed_height","displayImg","currentGifRef","IntersectionObserver","entries","forEach","entry","isIntersecting","root","observe","unobserve","alt","title","open","embed_url","onMouseEnter","onMouseLeave","GifsGrid","gifs","gifGridWidth","setGifGridWidth","gifGridStyle","availableWidth","gifWidth","columnsThatFit","Math","floor","columnAmount","gif","index","GifSearchResults","React","memo","isLoading","failedToLoad","length","faSpinner","href","LoadButton","isDisplayed","loadBtnClassName","MainSection","gifsPerRequest","allGifsFetched","apiResOffset","setTopBarIsStyled","displayAnyBtn","displayLoadMoreBtn","displayGoBackBtn","onScroll","refEl","ceil","scrollTop","clientHeight","scrollHeight","scroll","top","i","App","useMemo","String","random","setApiResOffset","setIsLoading","setAllGifsFetched","offset","path","searchForTrending","q","API_KEY","fetch","response","json","data","status","meta","totalCount","pagination","total_count","concat","numberOfNewGifs","min","newOffset","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a2dd5c93.chunk.js","sourcesContent":["import { useState } from 'react';\n\nexport function useLocalStorage(key, initialValue) {\n  // Function with logic to set state initially, only executed once\n  const initializeState = () => {\n    if (typeof window === \"undefined\") {\n      return initialValue;\n    }\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  };\n  const [storedValue, setStoredValue] = useState(initializeState);\n\n  // Return a wrapped version of useState's setter function that persists the new value to localStorage:\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state:\n      setStoredValue(valueToStore);\n      // Save to local storage:\n      if (typeof window !== \"undefined\") {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}","// taken from https://usehooks.com/useWindowSize/:\nimport { useEffect, useState } from 'react';\n\nexport function useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    window.addEventListener('resize', handleResize);\n    handleResize();\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowSize;\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faToggleOn, faToggleOff } from '@fortawesome/free-solid-svg-icons'\n\nexport function SettingsButton({ setFunction, isActive, text, refreshOnClick }) {\n  const toggleIcon = isActive ? faToggleOn : faToggleOff;\n\n  const handleClick = e => {\n    e.preventDefault();\n    setFunction(prev => !prev);\n    if (refreshOnClick) {\n      window.location.reload();\n    }\n  };\n\n  return (\n    <div className=\"settings-btn\" onClick={handleClick}>\n      <span className='settings-btn-text'>{text}</span>\n      <FontAwesomeIcon icon={toggleIcon} className='toggle-switch-icon' />\n    </div>\n  );\n}","import React, { useEffect, useRef, useState } from 'react';\nimport { useWindowSize } from '../../hooks/useWindowSize';\nimport { SettingsButton } from '../settings-button/SettingsButton';\n\nexport function SettingsDialog({\n  isOpen,\n  setIsOpen,\n  settingsIconRef,\n  darkModeIsActive,\n  setDarkModeIsActive,\n  isLowResolution,\n  setIsLowResolution,\n  playOnlyOnHover,\n  setPlayOnlyOnHover,\n  lazyLoadingIsOn,\n  setLazyLoadingIsOn,\n  infiniteScrollIsActive,\n  setInfiniteScrollIsActive\n}) {\n  const { width } = useWindowSize();\n  const dialogRef = useRef(null);\n  const [dialogOffsetLeft, setDialogOffsetLeft] = useState(0);\n\n  const settingsButtonData = [\n    {\n      setFunction: setLazyLoadingIsOn,\n      state: lazyLoadingIsOn,\n      text: 'Lazy loading',\n      refresh: false\n    },\n    {\n      setFunction: setIsLowResolution,\n      state: isLowResolution,\n      text: 'Low resolution',\n      refresh: false\n    },\n    {\n      setFunction: setPlayOnlyOnHover,\n      state: playOnlyOnHover,\n      text: 'Play only on hover',\n      refresh: false\n    },\n    {\n      setFunction: setInfiniteScrollIsActive,\n      state: infiniteScrollIsActive,\n      text: 'Infinte scroll',\n      refresh: true\n    },\n    {\n      setFunction: setDarkModeIsActive,\n      state: darkModeIsActive,\n      text: 'Dark mode',\n      refresh: false\n    }\n  ];\n\n  const dialogClassName = `${isOpen ? 'open ' : ''}${darkModeIsActive ? 'dark-mode' : ''}`;\n\n  const handleClickOutside = e => {\n    if (!dialogRef.current.contains(e.target) && !settingsIconRef.current.contains(e.target)) {\n      setIsOpen(false);\n    }\n  };\n\n  const mousedownEffect = () => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  };\n\n  const updateDialogOffsetLeft = () => {\n    const offsetLeft = settingsIconRef.current?.offsetLeft;\n    const dialogWidth = 220;\n    const iconWidth = 16;\n    const result = offsetLeft - dialogWidth + (iconWidth / 2);\n    setDialogOffsetLeft(result);\n  };\n\n  useEffect(updateDialogOffsetLeft, [width]);\n  useEffect(mousedownEffect, []);\n\n  return (\n    <div\n      id=\"settings-dialog\"\n      ref={dialogRef}\n      className={dialogClassName}\n      style={{ left: dialogOffsetLeft }}\n    >\n      {settingsButtonData.map(setting => (\n        <SettingsButton\n          key={setting.text}\n          setFunction={setting.setFunction}\n          isActive={setting.state}\n          text={setting.text}\n          refreshOnClick={setting.refresh}\n        />\n      ))}\n    </div>\n  );\n}","import React, { useState } from 'react';\nimport { useWindowSize } from '../../hooks/useWindowSize';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faXmark } from '@fortawesome/free-solid-svg-icons'\n\nexport function InputField({\n  inputRef,\n  darkModeIsActive,\n  trendingGifsQueryCode,\n  queryString,\n  setQueryString\n}) {\n  const { width } = useWindowSize();\n  const [focusInInput, setFocusInInput] = useState(false);\n\n  const inputValue = queryString === trendingGifsQueryCode ? '' : queryString;\n\n  const inputClassName = `${darkModeIsActive ? 'dark-mode ' : ''}${focusInInput ? 'input-focus' : ''}`;\n\n  const placeholder = `What type of GIFs${width > 550 ? ' would you like to see' : ''}?`;\n\n  const handleInputChange = e => setQueryString(e.target.value);\n  const handleInputFocus = () => setFocusInInput(true);\n  const handleInputBlur = () => setFocusInInput(false);\n\n  const handleXIconClick = () => {\n    setQueryString('');\n    inputRef.current.focus();\n  };\n\n  const xIcon = !inputValue ? null : (\n    <div id=\"x-icon-container\" onClick={handleXIconClick}>\n      <FontAwesomeIcon icon={faXmark} id='x-icon' />\n    </div>\n  );\n\n  return (\n    <div id=\"input-container\" className={inputClassName}>\n      <input\n        type=\"text\"\n        ref={inputRef}\n        placeholder={placeholder}\n        value={inputValue}\n        onChange={handleInputChange}\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n      />\n      {xIcon}\n    </div >\n  );\n}\n\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMagnifyingGlass } from '@fortawesome/free-solid-svg-icons'\nimport { InputField } from '../input-field/InputField';\n\nexport function SearchBar({\n  inputRef,\n  submitQuery,\n  darkModeIsActive,\n  trendingGifsQueryCode,\n  queryString,\n  setQueryString\n}) {\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    submitQuery(queryString);\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <InputField\n          inputRef={inputRef}\n          darkModeIsActive={darkModeIsActive}\n          trendingGifsQueryCode={trendingGifsQueryCode}\n          queryString={queryString}\n          setQueryString={setQueryString}\n        />\n        <button id='submit-btn' aria-label='Search'>\n          <FontAwesomeIcon icon={faMagnifyingGlass} id=\"magnifying-glass-icon\" />\n        </button>\n      </form>\n    </>\n  );\n}\n\n","import React, { useEffect, useRef, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEllipsisV, faHome } from '@fortawesome/free-solid-svg-icons'\nimport { SettingsDialog } from '../settings-dialog/SettingsDialog';\nimport { SearchBar } from '../search-bar/SearchBar';\n\nexport function TopBar({\n  trendingGifsQueryCode,\n  queryString,\n  setQueryString,\n  setGifs,\n  setFailedToLoad,\n  fetchGifs,\n  topBarIsStyled,\n  isLowResolution,\n  setIsLowResolution,\n  playOnlyOnHover,\n  setPlayOnlyOnHover,\n  lazyLoadingIsOn,\n  setLazyLoadingIsOn,\n  darkModeIsActive,\n  setDarkModeIsActive,\n  infiniteScrollIsActive,\n  setInfiniteScrollIsActive\n}) {\n  const settingsIconRef = useRef(null);\n  const inputRef = useRef(null);\n  const [settingsDialogIsOpen, setSettingsDialogIsOpen] = useState(false);\n\n  const topBarClassName = `${darkModeIsActive ? 'dark ' : ''}${topBarIsStyled ? 'styled' : ''}`;\n\n  const handleSettingsIconClick = () => setSettingsDialogIsOpen(prev => !prev);\n\n  const submitQuery = query => {\n    if (!query) {\n      window.alert('Please enter a search term');\n    } else {\n      setGifs([]);\n      setFailedToLoad(false);\n      inputRef.current.blur();\n      fetchGifs(query, 0);\n    }\n  };\n\n  const handleHomeIconClick = () => {\n    submitQuery(trendingGifsQueryCode, 0);\n    setQueryString(trendingGifsQueryCode);\n  }\n\n  const handleDarkMode = () => {\n    document.body.classList.toggle('dark', darkModeIsActive);\n  };\n\n  useEffect(handleDarkMode, [darkModeIsActive]);\n\n  return (\n    <div\n      id='top-bar'\n      className={topBarClassName}\n    >\n      <div id='top-bar-content'>\n        <div onClick={handleHomeIconClick} className='top-bar-icon-container'>\n          <FontAwesomeIcon icon={faHome} className='top-bar-icon' />\n        </div>\n        <SearchBar\n          inputRef={inputRef}\n          submitQuery={submitQuery}\n          darkModeIsActive={darkModeIsActive}\n          trendingGifsQueryCode={trendingGifsQueryCode}\n          queryString={queryString}\n          setQueryString={setQueryString}\n        />\n        <div\n          className='top-bar-icon-container'\n          ref={settingsIconRef}\n          onClick={handleSettingsIconClick}\n        >\n          <FontAwesomeIcon icon={faEllipsisV} className='top-bar-icon' />\n        </div>\n      </div>\n      <SettingsDialog\n        isOpen={settingsDialogIsOpen}\n        setIsOpen={setSettingsDialogIsOpen}\n        settingsIconRef={settingsIconRef}\n        darkModeIsActive={darkModeIsActive}\n        setDarkModeIsActive={setDarkModeIsActive}\n        isLowResolution={isLowResolution}\n        setIsLowResolution={setIsLowResolution}\n        playOnlyOnHover={playOnlyOnHover}\n        setPlayOnlyOnHover={setPlayOnlyOnHover}\n        lazyLoadingIsOn={lazyLoadingIsOn}\n        setLazyLoadingIsOn={setLazyLoadingIsOn}\n        infiniteScrollIsActive={infiniteScrollIsActive}\n        setInfiniteScrollIsActive={setInfiniteScrollIsActive}\n      />\n    </div>\n  );\n}\n","import React, { useEffect, useRef, useState } from 'react';\n\nexport function Gif({ gifObject, gifsContainerRef, isLowResolution, playOnlyOnHover, lazyLoadingIsOn }) {\n  const gifRef = useRef(null);\n  const io = useRef(null);\n  const [src, setSrc] = useState('');\n  const [isInViewport, setIsInViewport] = useState(false);\n\n  const { images } = gifObject;\n  const stillUrl = images.fixed_height_still.url;\n  const properResolutionUrl = isLowResolution ? images.fixed_height_downsampled.url : images.fixed_height.url;\n\n  const displayImg = isInViewport || !lazyLoadingIsOn;\n\n  const handleMouseEnter = () => {\n    if (playOnlyOnHover) {\n      setSrc(properResolutionUrl);\n    }\n  };\n\n  const handleMouseLeave = () => {\n    if (playOnlyOnHover) {\n      setSrc(stillUrl);\n    }\n  };\n\n  const openGiphyPageForGif = () => window.open(gifObject.embed_url, '_blank');\n\n  // inspired by https://levelup.gitconnected.com/how-to-implement-lazy-loading-in-react-with-intersection-observer-61c0e53ec8d:\n  const handleLazyLoad = () => {\n    if (!lazyLoadingIsOn) {\n      return;\n    }\n    const currentGifRef = gifRef.current;\n    if (currentGifRef) {\n      io.current = new IntersectionObserver(\n        entries => {\n          entries.forEach(entry => setIsInViewport(entry.isIntersecting));\n        },\n        { root: gifsContainerRef.current }\n      );\n      io.current.observe(currentGifRef);\n    }\n    return () => io.current.unobserve(currentGifRef);\n  };\n\n  const updateSrc = () => {\n    const url = playOnlyOnHover ? stillUrl : properResolutionUrl;\n    setSrc(url);\n  };\n\n  useEffect(handleLazyLoad, [gifRef, gifsContainerRef, lazyLoadingIsOn]);\n  useEffect(updateSrc, [isLowResolution, playOnlyOnHover, gifObject]);\n\n  return (\n    <div ref={gifRef} className=\"gif\">\n      {!displayImg ? null : (\n        <img\n          alt={gifObject.title}\n          src={src}\n          onClick={openGiphyPageForGif}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n        />\n      )}\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { useWindowSize } from '../../hooks/useWindowSize';\nimport { Gif } from '../gif/Gif';\n\nexport function GifsGrid({ gifs, gifsContainerRef, isLowResolution, playOnlyOnHover, lazyLoadingIsOn }) {\n  const { width } = useWindowSize();\n  const [gifGridWidth, setGifGridWidth] = useState(0);\n\n  const gifGridStyle = { width: !gifGridWidth ? 0 : gifGridWidth };\n\n  const calculateGridWidth = () => {\n    const availableWidth = width * 0.9;\n    const columnGap = 5;\n    // for narrow (phone) screens, reduce gif width to 90vw:\n    const gifWidth = availableWidth < 395 ? availableWidth : 395;\n    const columnsThatFit = Math.floor((availableWidth + columnGap) / (gifWidth + columnGap));\n    const columnAmount = columnsThatFit > 3 ? 3 : columnsThatFit;\n    const gridWidth = (columnAmount * gifWidth) + ((columnAmount - 1) * columnGap);\n    setGifGridWidth(gridWidth);\n  };\n\n  useEffect(calculateGridWidth, [width]);\n\n  return (\n    <div id='gifs-grid' style={gifGridStyle}>\n      {gifs.map((gif, index) => (\n        <Gif\n          key={index}\n          gifObject={gif}\n          gifsContainerRef={gifsContainerRef}\n          isLowResolution={isLowResolution}\n          playOnlyOnHover={playOnlyOnHover}\n          lazyLoadingIsOn={lazyLoadingIsOn}\n        />\n      ))}\n    </div>\n  );\n}","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { GifsGrid } from '../gifs-grid/GifsGrid';\n\nexport const GifSearchResults = React.memo(({\n  gifs,\n  gifsContainerRef,\n  isLoading,\n  failedToLoad,\n  isLowResolution,\n  playOnlyOnHover,\n  lazyLoadingIsOn\n}) => {\n  const displaySpinner = isLoading && !gifs.length;\n\n  if (displaySpinner) {\n    // while initial search results are loading, render spinner:\n    return (\n      <FontAwesomeIcon icon={faSpinner} id=\"spinner\" className='fa-spin' />\n    );\n  } else if (failedToLoad) {\n    // if search fails, remove spinner and inform user:\n    return (\n      <p id=\"error-message\">\n        Oops, something went wrong with your search. Click <a href='/'>here</a> to refresh.\n      </p>\n    );\n  } else {\n    return (\n      <GifsGrid\n        gifs={gifs}\n        gifsContainerRef={gifsContainerRef}\n        isLowResolution={isLowResolution}\n        playOnlyOnHover={playOnlyOnHover}\n        lazyLoadingIsOn={lazyLoadingIsOn}\n      />\n    );\n  }\n});\n","import React from 'react'\n\nexport function LoadButton({\n  text,\n  onClick,\n  isDisplayed,\n  darkModeIsActive\n}) {\n\n  const loadBtnClassName = darkModeIsActive ? 'dark-mode' : '';\n\n  return !isDisplayed ? null : (\n    // <button id='load-button' className={loadBtnClassName} onClick={onClick}>\n    //   <span id='load-button-text'>{text}</span>\n    //   <span id='load-button-animation-span' className={loadBtnClassName} />\n    // </button>\n    <div id='load-button-container' className={loadBtnClassName} onClick={onClick}>\n      <button id='load-button' className={loadBtnClassName}>\n        <span id='load-button-text'>{text}</span>\n      </button>\n      {/* <span id='load-button-animation-span' className={loadBtnClassName} /> */}\n    </div>\n  );\n}","import React, { useRef } from 'react';\nimport { useWindowSize } from '../../hooks/useWindowSize';\nimport { GifSearchResults } from '../gif-search-results/GifSearchResults';\nimport { LoadButton } from '../load-button/LoadButton';\n\nexport function MainSection({\n  gifs,\n  queryString,\n  fetchGifs,\n  gifsPerRequest,\n  failedToLoad,\n  isLoading,\n  allGifsFetched,\n  apiResOffset,\n  isLowResolution,\n  darkModeIsActive,\n  playOnlyOnHover,\n  lazyLoadingIsOn,\n  setTopBarIsStyled,\n  infiniteScrollIsActive\n}) {\n  const { height } = useWindowSize();\n  const gifsContainerRef = useRef(null);\n\n  const displayAnyBtn = !infiniteScrollIsActive && gifs.length;\n  const displayLoadMoreBtn = displayAnyBtn && !allGifsFetched;\n  const displayGoBackBtn = displayAnyBtn && apiResOffset > gifsPerRequest;\n\n  const handleScroll = () => {\n    const refEl = gifsContainerRef.current;\n    // infinite scroll:\n    if (\n      infiniteScrollIsActive &&\n      !allGifsFetched &&\n      (Math.ceil(refEl?.scrollTop + refEl?.clientHeight) >= refEl?.scrollHeight)\n    ) {\n      fetchGifs();\n    }\n    // change top bar styling when scrolled beyond 5vh:\n    setTopBarIsStyled(refEl.scrollTop >= height * 0.05);\n  };\n\n  const handleGoBackBtnClick = e => {\n    e.preventDefault();\n    const offset = apiResOffset - (gifsPerRequest * 2);\n    fetchGifs(queryString, offset);\n  };\n\n  const handleMoreBtnClick = e => {\n    e.preventDefault();\n    fetchGifs();\n    gifsContainerRef.current.scroll({ top: 0 });\n  };\n\n  return (\n    <main ref={gifsContainerRef} onScroll={handleScroll}>\n      <LoadButton\n        text='Go Back'\n        onClick={handleGoBackBtnClick}\n        isDisplayed={displayGoBackBtn}\n        darkModeIsActive={darkModeIsActive}\n      />\n      <GifSearchResults\n        gifs={gifs}\n        gifsContainerRef={gifsContainerRef}\n        isLoading={isLoading}\n        failedToLoad={failedToLoad}\n        isLowResolution={isLowResolution}\n        playOnlyOnHover={playOnlyOnHover}\n        lazyLoadingIsOn={lazyLoadingIsOn}\n      />\n      <LoadButton\n        text='Load More'\n        onClick={handleMoreBtnClick}\n        isDisplayed={displayLoadMoreBtn}\n        darkModeIsActive={darkModeIsActive}\n      />\n    </main>\n  )\n}\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { API_KEY } from '../../secrets.json';\nimport { useLocalStorage } from '../../hooks/useLocalStorage';\nimport { TopBar } from '../top-bar/TopBar';\nimport { MainSection } from '../main-section/MainSection';\n\nexport function App() {\n  const trendingGifsQueryCode = useMemo(() => String(Math.random()), []);\n  const [gifs, setGifs] = useState([]);\n  const [queryString, setQueryString] = useState(trendingGifsQueryCode);\n  const [apiResOffset, setApiResOffset] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [failedToLoad, setFailedToLoad] = useState(false);\n  const [allGifsFetched, setAllGifsFetched] = useState(false);\n  const [topBarIsStyled, setTopBarIsStyled] = useState(false);\n  const [isLowResolution, setIsLowResolution] = useLocalStorage('lowResolution', false);\n  const [playOnlyOnHover, setPlayOnlyOnHover] = useLocalStorage('playOnlyOnHover', false);\n  const [lazyLoadingIsOn, setLazyLoadingIsOn] = useLocalStorage('lazyLoading', true);\n  const [infiniteScrollIsActive, setInfiniteScrollIsActive] = useLocalStorage('infiniteScroll', true);\n  const [darkModeIsActive, setDarkModeIsActive] = useLocalStorage('darkMode', false);\n\n  const gifsPerRequest = infiniteScrollIsActive ? 18 : 30;\n\n  const fetchGifs = async (query = queryString, offset = apiResOffset) => {\n    if (isLoading) {\n      return;\n    }\n    setIsLoading(true);\n    setAllGifsFetched(false);\n    const searchForTrending = query === trendingGifsQueryCode;\n    const path = searchForTrending ? 'trending' : 'search';\n    const q = searchForTrending ? '' : `&q=${query}`;\n    // trending path finds currently trending gifs instead of searching for gifs about trending:\n    const url = `https://api.giphy.com/v1/gifs/${path}?api_key=${API_KEY}${q}&limit=${gifsPerRequest}&offset=${offset}`;\n    const response = await fetch(url);\n    const { data, meta: { status }, pagination: { total_count: totalCount } } = await response.json();\n    setIsLoading(false);\n    if (status < 200 || status > 299) {\n      setFailedToLoad(true);\n    } else if (data.length) {\n      setGifs(prev => infiniteScrollIsActive ? prev.concat(data) : data);\n      const numberOfNewGifs = data.length === gifsPerRequest ? gifsPerRequest : Math.min(data.length, gifsPerRequest);\n      const newOffset = offset + numberOfNewGifs;\n      setApiResOffset(newOffset);\n      setAllGifsFetched(newOffset >= totalCount);\n    } else {\n      setAllGifsFetched(true);\n    }\n  };\n\n  const fetchGifsOnMount = () => {\n    fetchGifs();\n  };\n\n  useEffect(fetchGifsOnMount, []);\n\n  return (\n    <>\n      <TopBar\n        trendingGifsQueryCode={trendingGifsQueryCode}\n        queryString={queryString}\n        setQueryString={setQueryString}\n        setGifs={setGifs}\n        fetchGifs={fetchGifs}\n        setFailedToLoad={setFailedToLoad}\n        topBarIsStyled={topBarIsStyled}\n        isLowResolution={isLowResolution}\n        setIsLowResolution={setIsLowResolution}\n        playOnlyOnHover={playOnlyOnHover}\n        setPlayOnlyOnHover={setPlayOnlyOnHover}\n        lazyLoadingIsOn={lazyLoadingIsOn}\n        setLazyLoadingIsOn={setLazyLoadingIsOn}\n        darkModeIsActive={darkModeIsActive}\n        setDarkModeIsActive={setDarkModeIsActive}\n        infiniteScrollIsActive={infiniteScrollIsActive}\n        setInfiniteScrollIsActive={setInfiniteScrollIsActive}\n      />\n      <MainSection\n        gifs={gifs}\n        setGifs={setGifs}\n        queryString={queryString}\n        fetchGifs={fetchGifs}\n        gifsPerRequest={gifsPerRequest}\n        failedToLoad={failedToLoad}\n        allGifsFetched={allGifsFetched}\n        isLoading={isLoading}\n        apiResOffset={apiResOffset}\n        isLowResolution={isLowResolution}\n        darkModeIsActive={darkModeIsActive}\n        playOnlyOnHover={playOnlyOnHover}\n        lazyLoadingIsOn={lazyLoadingIsOn}\n        setTopBarIsStyled={setTopBarIsStyled}\n        infiniteScrollIsActive={infiniteScrollIsActive}\n      />\n      <footer>\n        <span id='attribution'>Powered by GIPHY</span>\n      </footer>\n    </>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/app/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}