{"version":3,"sources":["MoreButton.js","MapGifs.js","SearchForGifs.js","TrendingGifs.js","App.js","index.js"],"names":["MoreButton","props","id","onClick","runApiSearch","mapGifs","className","arr","map","gif","alt","title","key","src","images","fixed_height_downsampled","url","length","SearchForGifs","useState","typedString","setTypedString","gifSearch","setGifSearch","searchResultGifs","setSearchResultGifs","isLoading","setIsLoading","isFirstSearch","setIsFirstSearch","failedToLoad","setFailedToLoad","offset","setOffset","fetch","API_KEY","then","res","json","jsonRes","meta","status","Error","msg","data","concat","catch","err","console","log","useEffect","Fragment","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","charAt","toUpperCase","substring","toLowerCase","MapGifs","TrendingGifs","trendingGifs","setTrendingGifs","App","ReactDOM","render","document","getElementById"],"mappings":"+SAMeA,EAJI,SAACC,GAAD,OACjB,yBAAKC,GAAG,cAAcC,QAASF,EAAMG,cAArC,MCcaC,EAdC,SAACJ,GAAD,OACd,yBAAKK,UAAU,kBACZL,EAAMM,IAAIC,KAAI,SAAAC,GAAG,OAChB,yBACEC,IAAKD,EAAIE,MACTC,IAAKH,EAAIP,GACTI,UAAU,OACVO,IAAKJ,EAAIK,OAAOC,yBAAyBC,SAG5Cf,EAAMM,IAAIU,OAAS,GAAK,kBAAC,EAAD,CAAYb,aAAcH,EAAMG,iB,OCT9C,SAASc,IAAiB,IAAD,EACAC,mBAAS,IADT,mBAC/BC,EAD+B,KAClBC,EADkB,OAEJF,mBAAS,IAFL,mBAE/BG,EAF+B,KAEpBC,EAFoB,OAGUJ,mBAAS,IAHnB,mBAG/BK,EAH+B,KAGbC,EAHa,OAIJN,oBAAS,GAJL,mBAI/BO,EAJ+B,KAIpBC,EAJoB,OAKIR,oBAAS,GALb,mBAK/BS,EAL+B,KAKhBC,EALgB,OAMEV,oBAAS,GANX,mBAM/BW,EAN+B,KAMjBC,EANiB,OAOVZ,mBAAS,GAPC,mBAO/Ba,EAP+B,KAOvBC,EAPuB,KAShC7B,EAAe,WAED,KAAdkB,IACFK,GAAa,GACbO,MAAM,gDAAD,OAAiDC,IAAjD,cAA8Db,EAA9D,4BAA2FU,IAC7FI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAEJ,GAAIA,EAAQC,KAAKC,OAAS,KAAOF,EAAQC,KAAKC,OAAS,IACrD,MAAM,IAAIC,MAAMH,EAAQC,KAAKG,KAE7BhB,GAAa,GACbM,EAAUD,EAAS,IACfJ,GACFH,EAAoBc,EAAQK,MAC5Bf,GAAiB,IAEjBJ,EAAoBD,EAAiBqB,OAAON,EAAQK,UAIzDE,OAAM,SAAAC,GACLpB,GAAa,GACbI,GAAgB,GAChBiB,QAAQC,IAAI,SAAUF,QAe9B,OAVAG,qBAAU,WACR9C,MACC,CAACkB,IAEJ4B,qBAAU,WACJxB,GAAaF,EAAiBP,OAAS,GACzCU,GAAa,KAEd,CAACD,EAAWF,EAAiBP,SAG9B,kBAAC,IAAMkC,SAAP,KACE,0BAAMC,SAAU,SAAAC,GACdA,EAAEC,iBACElC,IAAgBE,IAClBG,EAAoB,IACpBM,GAAgB,GAChBR,EAAaH,GACbC,EAAe,OAGjB,2BACEkC,KAAK,OACLC,YAAY,2CACZC,MAAOrC,EACPsC,SAAU,SAAAL,GAAC,OAAIhC,EAAegC,EAAEM,OAAOF,UAEzC,2CAGDjC,EAAiBP,OAAS,GAEzB,4BAAKK,EAAUsC,OAAO,GAAGC,cAAgBvC,EAAUwC,UAAU,GAAGC,cAAhE,SAGDrC,GAA2B,KAAdJ,GAEZ,yBAAKpB,GAAG,UAAUQ,IAAI,6BAA6BG,IAAI,kBAGxDiB,GAEC,uBAAG5B,GAAG,iBAAN,sGAGF,kBAAC8D,EAAD,CAASzD,IAAKiB,EAAkBpB,aAAcA,KCnFrC,SAAS6D,EAAa5D,GAAU,IAAD,EACJc,mBAAS,IADL,mBACrC+C,EADqC,KACvBC,EADuB,OAEhBhD,mBAAS,GAFO,mBAErCa,EAFqC,KAE7BC,EAF6B,KAItC7B,EAAe,WACnB8B,MAAM,kDAAD,OAAmDC,IAAnD,4BAA8EH,IAChFI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAEJ,GAAIA,EAAQC,KAAKC,OAAS,KAAOF,EAAQC,KAAKC,OAAS,IACrD,MAAM,IAAIC,MAAMH,EAAQC,KAAKG,KAG3BwB,EADa,IAAXnC,EACcO,EAAQK,KAERsB,EAAarB,OAAON,EAAQK,OAE9CX,EAAUD,EAAS,OAGtBc,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,SAAUF,OAOxC,OAJAG,qBAAU,WACR9C,MACC,IAGD,kBAAC,IAAM+C,SAAP,KACGe,EAAajD,OAAS,GACrB,6CAEF,kBAAC+C,EAAD,CAASzD,IAAK2D,EAAc9D,aAAcA,KChChD,IAOegE,EAPH,kBACV,kBAAC,IAAMjB,SAAP,KACE,kBAACjC,EAAD,MACA,kBAAC+C,EAAD,QCFJI,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b1d6835a.chunk.js","sourcesContent":["import React from 'react';\n\nconst MoreButton = (props) => (\n  <div id=\"more-button\" onClick={props.runApiSearch}>></div>\n);\n\nexport default MoreButton;","import React from 'react';\nimport MoreButton from './MoreButton';\n\nconst mapGifs = (props) => (\n  <div className=\"gifs-container\">\n    {props.arr.map(gif => (\n      <img\n        alt={gif.title}\n        key={gif.id}\n        className=\"gifs\"\n        src={gif.images.fixed_height_downsampled.url}>\n      </img>\n    ))}\n    {props.arr.length > 0 && <MoreButton runApiSearch={props.runApiSearch} />}\n  </div>\n);\n\nexport default mapGifs;\n","import React, { useState, useEffect } from 'react';\nimport MapGifs from './MapGifs';\nimport { API_KEY } from './secrets.json';\n\nexport default function SearchForGifs() {\n  const [typedString, setTypedString] = useState(\"\");\n  const [gifSearch, setGifSearch] = useState(\"\");\n  const [searchResultGifs, setSearchResultGifs] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFirstSearch, setIsFirstSearch] = useState(true);\n  const [failedToLoad, setFailedToLoad] = useState(false);\n  const [offset, setOffset] = useState(0);\n\n  const runApiSearch = () => {\n    // This condition prevents this API request being made on the intitial mount:\n    if (gifSearch !== \"\") {\n      setIsLoading(true);\n      fetch(`https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${gifSearch}&limit=15&offset=${offset}`)\n        .then(res => res.json())\n        .then(jsonRes => {\n          // Check in meta data whether response is OK:\n          if (jsonRes.meta.status < 200 || jsonRes.meta.status > 299) {\n            throw new Error(jsonRes.meta.msg);\n          } else {\n            setIsLoading(true);\n            setOffset(offset + 15);\n            if (isFirstSearch) {\n              setSearchResultGifs(jsonRes.data);\n              setIsFirstSearch(false);\n            } else {\n              setSearchResultGifs(searchResultGifs.concat(jsonRes.data))\n            }\n          }\n        })\n        .catch(err => {\n          setIsLoading(false);\n          setFailedToLoad(true);\n          console.log(\"Error:\", err)\n        })\n    }\n  };\n\n  useEffect(() => {\n    runApiSearch();\n  }, [gifSearch]);\n\n  useEffect(() => {\n    if (isLoading && searchResultGifs.length > 0) {\n      setIsLoading(false);\n    }\n  }, [isLoading, searchResultGifs.length]);\n\n  return (\n    <React.Fragment>\n      <form onSubmit={e => {\n        e.preventDefault();\n        if (typedString !== gifSearch) {\n          setSearchResultGifs([]);\n          setFailedToLoad(false);\n          setGifSearch(typedString);\n          setTypedString(\"\");\n        }\n      }}>\n        <input\n          type=\"text\"\n          placeholder=\"What type of GIFs would you like to see?\"\n          value={typedString}\n          onChange={e => setTypedString(e.target.value)}\n        />\n        <button>Search</button>\n      </form>\n\n      {searchResultGifs.length > 0 && (\n        // Search query becomes heading, formatted with capital first letter:\n        <h2>{gifSearch.charAt(0).toUpperCase() + gifSearch.substring(1).toLowerCase()} GIFs</h2>\n      )}\n\n      {isLoading && gifSearch !== \"\" && (\n        // While search results are loading, render spinner:\n        <img id=\"spinner\" alt=\"Search results are loading\" src=\"./spinner.gif\" />\n      )}\n\n      {failedToLoad && (\n        // If search fails, remove spinner and inform user:\n        <p id=\"error-message\">Oops, something went wrong with your search. Check console for error message, or simply try again.</p>\n      )}\n\n      <MapGifs arr={searchResultGifs} runApiSearch={runApiSearch} />\n    </React.Fragment>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport MapGifs from './MapGifs';\nimport { API_KEY } from './secrets.json';\n\nexport default function TrendingGifs(mapGifs) {\n  const [trendingGifs, setTrendingGifs] = useState([]);\n  const [offset, setOffset] = useState(0);\n\n  const runApiSearch = () => {\n    fetch(`https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}&limit=15&offset=${offset}`)\n      .then(res => res.json())\n      .then(jsonRes => {\n        // Check in meta data whether response is OK:\n        if (jsonRes.meta.status < 200 || jsonRes.meta.status > 299) {\n          throw new Error(jsonRes.meta.msg);\n        } else {\n          if (offset === 0) {\n            setTrendingGifs(jsonRes.data);\n          } else {\n            setTrendingGifs(trendingGifs.concat(jsonRes.data));\n          }\n          setOffset(offset + 15);\n        }\n      })\n      .catch(err => console.log(\"Error:\", err))\n  };\n\n  useEffect(() => {\n    runApiSearch();\n  }, []);\n\n  return (\n    <React.Fragment>\n      {trendingGifs.length > 0 && (\n        <h2>Trending GIFs</h2>\n      )}\n      <MapGifs arr={trendingGifs} runApiSearch={runApiSearch} />\n    </React.Fragment>\n  )\n}\n","import React from 'react';\nimport SearchForGifs from './SearchForGifs';\nimport TrendingGifs from './TrendingGifs';\n\nconst App = () => (\n  <React.Fragment>\n    <SearchForGifs />\n    <TrendingGifs />\n  </React.Fragment>\n)\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}